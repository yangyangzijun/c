#include <sys/types.h>
#include <sys/socket.h>
#include <sys/select.h>
#include <stdio.h>
#include <poll.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/shm.h>
#include <thread>
#include <iostream>
#define PORT 7000
#define port 7001
#define QUEUE 20//连接请求队列
int conn;
void thread_task()
{
}
using namespace std;

int main()
{
    //printf("%d\n",AF_INET);//IPv4协议
    printf("%d\n",SOCK_STREAM);//字节流套接字
    int ss = socket(AF_INET, SOCK_STREAM, 0);//若成功则返回一个sockfd（套接字描述符）
    //printf("%d\n",ss);
    struct sockaddr_in server_sockaddr;//一般是储存地址和端口的。用于信息的显示及存储使用
    /*设置 sockaddr_in 结构体中相关参数*/
    server_sockaddr.sin_family = AF_INET;
    server_sockaddr.sin_port = htons(PORT);//将一个无符号短整型数值转换为网络字节序，即大端模式(big-endian)　
    //printf("%d\n",INADDR_ANY);
    //INADDR_ANY就是指定地址为0.0.0.0的地址，这个地址事实上表示不确定地址，或“所有地址”、“任意地址”。
    //一般来说，在各个系统中均定义成为0值。
    server_sockaddr.sin_addr.s_addr = htonl(INADDR_ANY);//将主机的无符号长整形数转换成网络字节顺序。　
    if(bind(ss, (struct sockaddr* ) &server_sockaddr, sizeof(server_sockaddr))==-1)
    {
        perror("bind");
        exit(1);
    }
    if(listen(ss, QUEUE) == -1)
    {
        perror("listen");
        exit(1);
    }

    struct sockaddr_in client_addr;
    socklen_t length = sizeof(client_addr);
    ///成功返回非负描述字，出错返回-1
    //conn = accept(ss, (struct sockaddr*)&client_addr, &length);
    //如果accpet成功，那么其返回值是由内核自动生成的一个全新描述符，代表与所返回客户的TCP连接。
    //accpet之后就会用新的套接字conn
    if( conn < 0 )
    {
        perror("connect");
        exit(1);
    }

    char buffer[1024];
    //创建另外一个线程
    //std::thread t(thread_task);
    //t.join();
    char buf[1024];
    fd_set frst;
    FD_ZERO(&frst);
    FD_SET(ss,&frst);
    struct pollfd fds[1];
    fds[0].fd=ss;
    fds[0].events=POLLIN;



    //主线程
    while(1)
    {
        //这里把send注释掉了，所以这个程序中server只能是接收client端的数据并能给client发送数据，即使不注释掉也没用，因为没有对是否有数据传入和传入
        //进行判断所以按照下面的代码这样写，每次都要先让server输入后才能输出client传过来的数据，若是server不输入则程序无法向下走就没有client发送过来的输出，
        //而且每次显示也只能是一行，这样显示就全是错的了，所以就需要select和FD_ISSET的判断了

            int ret = poll(fds,1,2000);
        if(ret>0) {
           if(fds[0].events==POLLIN)
           {
                conn = accept(ss, (struct sockaddr *) &client_addr, &length);
                memset(buffer, 0, sizeof(buffer));
                int len = recv(conn, buffer, sizeof(buffer), 0);//从TCP连接的另一端接收数据。

                if (strcmp(buffer, "exit\n") == 0)//如果没有收到TCP另一端发来的数据则跳出循环不输出
                {
                    break;
                }
                printf("%s", buffer);//如果有收到数据则输出数据
                //必须要有返回数据， 这样才算一个完整的请求
                send(conn, "ok", 2, 0);//向TCP连接的另一端发送数据。
            }
        }

        /*int ret = select(ss+1,&frst,NULL,NULL,0);
        if(ret>0)
        {
            if(FD_ISSET(ss,&frst))
            {
                conn = accept(ss, (struct sockaddr*)&client_addr, &length);
                memset(buffer, 0 ,sizeof(buffer));
                int len = recv(conn, buffer, sizeof(buffer), 0);//从TCP连接的另一端接收数据。

                if(strcmp(buffer, "exit\n") == 0)//如果没有收到TCP另一端发来的数据则跳出循环不输出
                {
                    break;
                }
                printf("%s", buffer);//如果有收到数据则输出数据
                //必须要有返回数据， 这样才算一个完整的请求
                send(conn, "ok", 2 , 0);//向TCP连接的另一端发送数据。
            }
        }*/



    }

    return 0;
}
